[{"C:\\Users\\dongthoigian\\Desktop\\buoi21\\my-app\\src\\index.js":"1","C:\\Users\\dongthoigian\\Desktop\\buoi21\\my-app\\src\\App.js":"2","C:\\Users\\dongthoigian\\Desktop\\buoi21\\my-app\\src\\reportWebVitals.js":"3","C:\\Users\\dongthoigian\\Desktop\\buoi21\\my-app\\src\\context\\MyGlobalContext.js":"4","C:\\Users\\dongthoigian\\Desktop\\buoi21\\my-app\\src\\components\\unit-24\\TestUseMemo.js":"5","C:\\Users\\dongthoigian\\Desktop\\buoi21\\my-app\\src\\components\\unit-24\\Table.js":"6"},{"size":517,"mtime":1608967508929,"results":"7","hashOfConfig":"8"},{"size":1144,"mtime":1608967508876,"results":"9","hashOfConfig":"8"},{"size":375,"mtime":1608967508931,"results":"10","hashOfConfig":"8"},{"size":155,"mtime":1608967508927,"results":"11","hashOfConfig":"8"},{"size":834,"mtime":1608967508923,"results":"12","hashOfConfig":"8"},{"size":2332,"mtime":1608967508921,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"t9hnn3",{"filePath":"17","messages":"18","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"16"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"16"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29"},"C:\\Users\\dongthoigian\\Desktop\\buoi21\\my-app\\src\\index.js",[],["30","31"],"C:\\Users\\dongthoigian\\Desktop\\buoi21\\my-app\\src\\App.js",["32","33"],"import React, { useState, useEffect, useRef } from 'react'\r\nimport { MyGlobalContext } from './context/MyGlobalContext'\r\nimport axios from 'axios'\r\n// import ClipLoader from 'react-spinners/ClipLoader'\r\n// import UserList from './components/unit-23/UserList'\r\nimport 'antd/dist/antd.css' // or 'antd/dist/antd.less'\r\nimport TestUseMemo from './components/unit-24/TestUseMemo'\r\nimport MyTable from './components/unit-24/Table'\r\n\r\nconst App = () => {\r\n  const h1 = useRef(null)\r\n  const [loading, setLoading] = useState(true)\r\n  const [gContext, setGContext] = useState({\r\n    user: null\r\n  })\r\n\r\n  const getCurrentUser = id => {\r\n    axios.get(`https://jsonplaceholder.typicode.com/users/${id}`)\r\n      .then(response => {\r\n        const user = response.data\r\n        setGContext({\r\n          user\r\n        })\r\n        setLoading(false)\r\n      })\r\n  }\r\n\r\n  useEffect(() => {\r\n    getCurrentUser(2)\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    console.log(h1)\r\n  }, [h1])\r\n\r\n  return (\r\n    <MyGlobalContext.Provider value={gContext}>\r\n      <h1 ref={h1}>Buổi 24</h1>\r\n      <MyTable />\r\n    </MyGlobalContext.Provider>\r\n  )\r\n}\r\n\r\nexport default App\r\n","C:\\Users\\dongthoigian\\Desktop\\buoi21\\my-app\\src\\reportWebVitals.js",[],"C:\\Users\\dongthoigian\\Desktop\\buoi21\\my-app\\src\\context\\MyGlobalContext.js",[],"C:\\Users\\dongthoigian\\Desktop\\buoi21\\my-app\\src\\components\\unit-24\\TestUseMemo.js",["34","35"],"import React, { useState, useMemo, useReducer } from 'react'\r\n\r\nconst myReducer = (state, action) => {\r\n  switch(action.type) {\r\n    case 'INCREMENT':\r\n      return {\r\n        ...state,\r\n        count: state.count + action.number\r\n      }\r\n    case 'DECREMENT':\r\n      return {\r\n        ...state,\r\n        count: state.count - 1\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nconst TestUseMemo = () => {\r\n  const [state, dispatch] = useReducer(myReducer, { count: 2, name: 'Nguyễn Văn A' })\r\n\r\n  return (\r\n    <>\r\n      <h1>TestUseMemo</h1>\r\n      <h1>Count: {state.count}</h1>\r\n      <button onClick={() => dispatch({ type: 'INCREMENT', number: 1 })}>INCREMENT COUNT</button>\r\n      <button onClick={() => dispatch({ type: 'INCREMENT', number: 2 })}>INCREMENT COUNT</button>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default TestUseMemo\r\n","C:\\Users\\dongthoigian\\Desktop\\buoi21\\my-app\\src\\components\\unit-24\\Table.js",["36","37","38"],"import React, { useState } from 'react'\r\nimport { Popconfirm, Table, Button, Form, Input } from 'antd'\r\nimport { v4 as uuid } from 'uuid'\r\n\r\nconst initData = [\r\n  {\r\n    key: '0',\r\n    name: 'Edward King 0',\r\n    age: '32',\r\n    address: 'London, Park Lane no. 0',\r\n  },\r\n  {\r\n    key: '1',\r\n    name: 'Edward King 1',\r\n    age: '32',\r\n    address: 'London, Park Lane no. 1',\r\n  },\r\n]\r\n\r\nconst EditableCell = ({children, editing, dataIndex}) => {\r\n  return <td>\r\n    {\r\n      editing ? (\r\n        <Form.Item name={dataIndex}>\r\n          <Input />\r\n        </Form.Item>\r\n      ) : (\r\n        children\r\n      )\r\n    }\r\n  </td>\r\n}\r\n\r\nconst MyTable = () => {\r\n  const [form] = Form.useForm()\r\n  const [items, setItems] = useState(initData)\r\n  const [editingKey, setEditingKey] = useState('')\r\n\r\n  const handleDelete = key => {\r\n    const newItems = items.filter(item => item.key !== key)\r\n    setItems([...newItems])\r\n  }\r\n\r\n  const isEditing = (record) => record.key === editingKey;\r\n\r\n  const edit = record => {\r\n\r\n  }\r\n\r\n  const columns = [\r\n    {\r\n      title: 'name',\r\n      dataIndex: 'name',\r\n      width: '30%',\r\n      editable: true,\r\n    },\r\n    {\r\n      title: 'age',\r\n      dataIndex: 'age',\r\n    },\r\n    {\r\n      title: 'address',\r\n      dataIndex: 'address',\r\n    },\r\n    {\r\n      title: 'operation',\r\n      dataIndex: 'operation',\r\n      render: (text, record) => {\r\n        if (!items.length) {\r\n          return null\r\n        }\r\n\r\n        const editable = isEditing(record)\r\n\r\n        return (<>\r\n          <Button onClick={() => edit(record)}>Edit</Button>\r\n\r\n          <Popconfirm title=\"Sure to delete?\" onConfirm={() => handleDelete(record.key)}>\r\n            <a>Delete</a>\r\n          </Popconfirm>\r\n        </>)\r\n      }\r\n    },\r\n  ]\r\n\r\n  const addNewItem = () => {\r\n    setItems([\r\n      ...items,\r\n      {\r\n        key: uuid(),\r\n        name: '',\r\n        age: '',\r\n        address: '',\r\n      }\r\n    ])\r\n  }\r\n\r\n  return <>\r\n    <Button onClick={addNewItem}>Add new</Button>\r\n\r\n    <Form form={form} component={false}>\r\n      <Table\r\n        rowClassName={() => 'editable-row'}\r\n        bordered\r\n        dataSource={items}\r\n        columns={columns}\r\n        components={{\r\n          body: {\r\n            cell: EditableCell,\r\n          },\r\n        }}\r\n      />\r\n    </Form>\r\n  </>\r\n}\r\n\r\nexport default MyTable\r\n",{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","severity":1,"message":"44","line":7,"column":8,"nodeType":"45","messageId":"46","endLine":7,"endColumn":19},{"ruleId":"43","severity":1,"message":"47","line":12,"column":10,"nodeType":"45","messageId":"46","endLine":12,"endColumn":17},{"ruleId":"43","severity":1,"message":"48","line":1,"column":17,"nodeType":"45","messageId":"46","endLine":1,"endColumn":25},{"ruleId":"43","severity":1,"message":"49","line":1,"column":27,"nodeType":"45","messageId":"46","endLine":1,"endColumn":34},{"ruleId":"43","severity":1,"message":"50","line":37,"column":22,"nodeType":"45","messageId":"46","endLine":37,"endColumn":35},{"ruleId":"43","severity":1,"message":"51","line":73,"column":15,"nodeType":"45","messageId":"46","endLine":73,"endColumn":23},{"ruleId":"52","severity":1,"message":"53","line":79,"column":13,"nodeType":"54","endLine":79,"endColumn":16},"no-native-reassign",["55"],"no-negated-in-lhs",["56"],"no-unused-vars","'TestUseMemo' is defined but never used.","Identifier","unusedVar","'loading' is assigned a value but never used.","'useState' is defined but never used.","'useMemo' is defined but never used.","'setEditingKey' is assigned a value but never used.","'editable' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-global-assign","no-unsafe-negation"]